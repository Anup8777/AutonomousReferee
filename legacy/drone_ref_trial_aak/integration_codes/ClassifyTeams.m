%%
%objective: find a player for teh FOV=45 z=18 test video case
% Note : team A corresponds to red marker, team B corresponds to yelow marker

%steps
%1. team B is filtered by the colour thresholder app generated filter values
% Note : team A values need not be filtered out, as the bw values will already have
% team A pixel values as 1
%2. after filtering morphological operations are used to clean up the noises
%in the image
%3. the pixel id of the centroid of the teamB player is 
%obtained using regionprops function
%4. the Team B player centroid pixel id in step3 is searched in the pixel id of the blobs
%generated by bwconncomp function on the output of the player detection code block
%5. the pixel values of all matched blobs of team B are arbitrary pixel value, in this case 2
%% Function for classifying the players
function [B,bw,Player_area_TeamA,Player_area_TeamB,Player_id_TeamA,Player_id_TeamB]= ClassifyTeams(B,bw,image_frame,teamA_color,teamB_color,tolerance)   %making it a function
%inputs to the function 
%B- from player detection
%bw - binary image fromo player detection
%test_image= rgb image input for the whole system
%[B,bw]=DetectPlayer_v2();
%% input the image
%input1= imread(test_image);
% I = imread(image_frame);
 %% team A classifier matrix
 %% mask the markers in the picture 
% Convert RGB image to chosen color space
%I = input1;
% tolerance = 25;
% Define thresholds for channel 1 based on histogram settings
channel1Min = max(1,teamA_color(1) -tolerance);
channel1Max = min(teamA_color(1)+tolerance,255);

% Define thresholds for channel 2 based on histogram settings
channel2Min = max(1,teamA_color(2) - tolerance);
channel2Max = min(255,teamA_color(2) + tolerance);

% Define thresholds for channel 3 based on histogram settings
channel3Min = max(1,teamA_color(3) - tolerance);
channel3Max = min(255,teamA_color(3) + tolerance);
% % Create mask based on chosen histogram thresholds
 BW = (image_frame(:,:,1) >= channel1Min ) & (image_frame(:,:,1) <= channel1Max) & ...
     (image_frame(:,:,2) >= channel2Min ) & (image_frame(:,:,2) <= channel2Max) & ...
     (image_frame(:,:,3) >= channel3Min ) & (image_frame(:,:,3) <= channel3Max);
% %BW = sliderBW;
% 
% %% morphological operations for noise filtering
 SE = strel('disk',10); % the parameter will change depending on the view(height, angle) of the camera
 openedimg = imclose(BW,SE); % was originally imopen but detections that are very small are lost
 teamA = imfill(openedimg,'holes'); % this shall be the output of team 1 image matrix 
 %teamA: binary image with the team A markers as 1
 %imshow(teamA);
 statsA = regionprops('table',teamA,'Centroid');
%imshow(bw);
 %% team B classifier matrix
 %% mask the markers in the picture 
% Convert RGB image to chosen color space
%I = input1;

% Define thresholds for channel 1 based on histogram settings
channel1Min = max(1,teamB_color(1) -tolerance);
channel1Max = min(teamB_color(1)+tolerance,255);

% Define thresholds for channel 2 based on histogram settings
channel2Min = max(1,teamB_color(2) - tolerance);
channel2Max = min(255,teamB_color(2) + tolerance);

% Define thresholds for channel 3 based on histogram settings
channel3Min = max(1,teamB_color(3) - tolerance);
channel3Max = min(255,teamB_color(3) + tolerance);

% Create mask based on chosen histogram thresholds
BWb = (image_frame(:,:,1) >= channel1Min ) & (image_frame(:,:,1) <= channel1Max) & ...
    (image_frame(:,:,2) >= channel2Min ) & (image_frame(:,:,2) <= channel2Max) & ...
    (image_frame(:,:,3) >= channel3Min ) & (image_frame(:,:,3) <= channel3Max);
%BWb = sliderBW;
%% morphological operations for noise filtering
SE = strel('disk',10); % the parameter will change depending on the view(height, angle) of the camera
openedimg = imclose(BWb,SE); % was originally imopen
teamB = imfill(openedimg,'holes'); % this shall be the output of team 1 image matrix 
%teamB: binary image with the team A markers as 2
% figure, imshow(teamB);
statsB = regionprops('table',teamB,'Centroid');
%imshow(bw);
%% labelling the Team A and Team B players in the binary image bw with value 1 
cc= bwconncomp(bw);% finding the connected objects(team a, team B  and the rest)
%index form the centroid value
idx = size(bw,1)*(round(statsA.Centroid(:,1))-1)+round(statsA.Centroid(:,2)); % calculating the linear indices from the centroid coordinates
idxB = size(bw,1)*(round(statsB.Centroid(:,1))-1)+round(statsB.Centroid(:,2));
%i=0;%zeros(numel(cc.PixelIdxList)); % variable for the below if loop entry checking
bw=int8(bw); % converting from logical matrix % this conversion may not necessary 
NrTeamA = size(statsA.Centroid,1);
NrTeamB = size(statsB.Centroid,1);
%searching the centroid index in the pixel id list of objects in bw
%the beloe pizel value assignemetn for team A may not be needed as the team A memebers are already with 1 pixel
Player_area_TeamA = zeros(size(bw));
Player_area_TeamB = zeros(size(bw));
Player_id_TeamA=zeros(size(bw));
Player_id_TeamB=zeros(size(bw));
  for n = 1:NrTeamA
     for k=1:numel(cc.PixelIdxList)
             if nnz(cc.PixelIdxList{k}==idx(n))%n=1:numel(cc.PixelIdxList{k}) 
                % i(n)=k; %for checking entry into the if loop                 
                 bw(cc.PixelIdxList{k}(:))=1;%*10+(n-1); %for player identification within a team
                 Player_area_TeamA(cc.PixelIdxList{k}(:)) = numel(cc.PixelIdxList{k}(:));
%                  if ~any(any(Player_id_TeamA(cc.PixelIdxList{k}(:))==10+[1:n])) % to avoid relabelling for labelled player
                    Player_id_TeamA(cc.PixelIdxList{k}(:)) = 1*10+n;
%                  end
             end
     end    
  end
  
  %imshow(bw);

%team B pixel value assignment
for n = 1:NrTeamB
    for k=1:numel(cc.PixelIdxList)
           if nnz(cc.PixelIdxList{k}==idxB(n))%n=1:numel(cc.PixelIdxList{k}) 
               bw(cc.PixelIdxList{k}(:))=2;%*10+(n-1); %for player identification within a team
               %%%%%%%%%%%%edited for debugging by anand
               Player_area_TeamB(cc.PixelIdxList{k}(:)) =numel(cc.PixelIdxList{k}(:)); 
%              if ~any(any(Player_id_TeamB(cc.PixelIdxList{k}(:))==20+[1:n])) % to avoid relabelling for labelled player
               Player_id_TeamB(cc.PixelIdxList{k}(:)) = 2*10+n;
%              end
         end
    end    
end   
% disp(['Number of detections B ',num2str(size(statsB,1))]);
   % imshow(bw);
end